{"version":3,"sources":["utils/duration/index.js","pomodoro/ProgressDisplay.js","pomodoro/Timers.js","pomodoro/StartAndStop.js","utils/class-names/index.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","ProgressDisplay","session","isTimerRunning","focusDuration","breakDuration","pauseToggle","focusBreakToggle","label","time","bar","timeRemaining","className","data-testid","givenSeconds","seconds","round","secondsToDuration","style","display","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","timers","incrementFocusDuration","decrementFocusDuration","incrementBreakDuration","decrementBreakDuration","disabled","type","onClick","startAndStop","classNameToBoolean","playPause","stop","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setSession","setDisabled","setFocusDuration","setBreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","state","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4466441.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}","import {minutesToDuration, secondsToDuration} from \"../utils/duration\";\r\nimport React from \"react\";\r\n\r\nexport default function ProgressDisplay({ session, isTimerRunning, focusDuration, breakDuration }){\r\n    if(!session) return null; // does not display when session is not active\r\n\r\n    // displays pause text when paused\r\n    const pauseToggle = (!isTimerRunning === false || session === null) ? \"none\" : \"block\";\r\n    // switches caption depending on session state\r\n    const focusBreakToggle = (session?.label === \"Focusing\") ?\r\n        `${minutesToDuration(focusDuration)} minutes` :\r\n        `${minutesToDuration(breakDuration)} minutes`;\r\n    // math to handle progress bar filling\r\n    const time = (session?.label === \"Focusing\") ? focusDuration : breakDuration\r\n    const bar = (1 - (session?.timeRemaining / (time * 60))) * 100\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    <h2 data-testid=\"session-title\">\r\n                        {/* focusing/break for x minutes */}\r\n                        {session?.label} for {focusBreakToggle}\r\n                    </h2>\r\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                        {secondsToDuration(session?.timeRemaining)} remaining\r\n                    </p>\r\n                    <h3 style={{display: `${pauseToggle}`}}>\r\n                        PAUSED\r\n                    </h3>\r\n                </div>\r\n            </div>\r\n            <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    <div className=\"progress\" style={{ height: \"20px\"}}>\r\n                        <div\r\n                            className=\"progress-bar\"\r\n                            role=\"progressbar\"\r\n                            aria-valuemin=\"0\"\r\n                            aria-valuemax=\"100\"\r\n                            aria-valuenow={bar}\r\n                            style={{width: `${bar}%`}}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n    ","import React from \"react\"\r\nimport {minutesToDuration} from \"../utils/duration\";\r\n\r\nexport default function timers({ \r\n    incrementFocusDuration, \r\n    decrementFocusDuration, \r\n    incrementBreakDuration, \r\n    decrementBreakDuration, \r\n    focusDuration, \r\n    breakDuration, \r\n    disabled }){\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col\">\r\n              <div className=\"input-group input-group-lg mb-2\">\r\n                <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n                    Focus Duration: {minutesToDuration(focusDuration)}\r\n                </span>\r\n                <div className=\"input-group-append\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        onClick={decrementFocusDuration}\r\n                        disabled={!disabled}\r\n                        data-testid=\"decrease-focus\"\r\n                    >\r\n                        <span className=\"oi oi-minus\" />\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        onClick={incrementFocusDuration}\r\n                        disabled={!disabled}\r\n                        data-testid=\"increase-focus\"\r\n                    >\r\n                        <span className=\"oi oi-plus\" />\r\n                    </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col\">\r\n                <div className=\"float-right\">\r\n                    <div className=\"input-group input-group-lg mb-2\">\r\n                        <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n                            Break Duration: {minutesToDuration(breakDuration)}\r\n                        </span>\r\n                        <div className=\"input-group-append\">\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-secondary\"\r\n                                onClick={decrementBreakDuration}\r\n                                disabled={!disabled}\r\n                                data-testid=\"decrease-break\"\r\n                            >\r\n                                <span className=\"oi oi-minus\" />\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-secondary\"\r\n                                onClick={incrementBreakDuration}\r\n                                disabled={!disabled}\r\n                                data-testid=\"increase-break\"\r\n                            >\r\n                                <span className=\"oi oi-plus\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\n\r\nexport default function startAndStop({ isTimerRunning, disabled, playPause, stop }){\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col\">\r\n                <div\r\n                    className=\"btn-group btn-group-lg mb-2\"\r\n                    role=\"group\"\r\n                    aria-label=\"Timer controls\"\r\n                >\r\n                    <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                    data-testid=\"play-pause\"\r\n                    title=\"Start or pause timer\"\r\n                    onClick={playPause}\r\n                    >\r\n                    <span\r\n                        className={classNames({\r\n                        oi: true,\r\n                        \"oi-media-play\": !isTimerRunning,\r\n                        \"oi-media-pause\": isTimerRunning,\r\n                        })}\r\n                    />\r\n                    \r\n                    </button>\r\n                    <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secondary\"\r\n                    data-testid=\"stop\"\r\n                    disabled={disabled}\r\n                    onClick={stop}\r\n                    title=\"Stop the session\"\r\n                    >\r\n                    <span className=\"oi oi-media-stop\" />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport ProgressDisplay from \"./ProgressDisplay\";\nimport Timers from \"./Timers\";\nimport StartAndStop from \"./StartAndStop\"\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  const [disabled, setDisabled] = useState(true);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  let [focusDuration, setFocusDuration] = useState(25);\n  const incrementFocusDuration = () => setFocusDuration((time) => time < 60 ? time + 5 : time)\n  const decrementFocusDuration = () => setFocusDuration((time) => time > 5 ? time - 5 : time)\n  let [breakDuration, setBreakDuration] = useState(5);\n  const incrementBreakDuration = () => setBreakDuration((time) => time < 60 ? time + 1 : time)\n  const decrementBreakDuration = () => setBreakDuration((time) => time > 1 ? time - 1 : time)\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setDisabled((state) => state = false)\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  function stop() {\n    // sets session to default values besides timer settings\n    setIsTimerRunning((state) => state = false)\n    setSession((state) => state = null)\n    setDisabled((state) => state = true)\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <Timers \n        incrementFocusDuration={incrementFocusDuration}\n        decrementFocusDuration={decrementFocusDuration}\n        incrementBreakDuration={incrementBreakDuration}\n        decrementBreakDuration={decrementBreakDuration}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        disabled={disabled}\n      />\n      <StartAndStop \n        isTimerRunning={isTimerRunning}\n        disabled={disabled}\n        playPause={playPause}\n        stop={stop}\n      />\n      <ProgressDisplay \n        session={session} \n        isTimerRunning={isTimerRunning} \n        focusDuration={focusDuration}\n        breakDuration={breakDuration} />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}