{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\geoff\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport ProgressDisplay from \"./ProgressDisplay\";\nimport Timers from \"./Timers\";\nimport StartAndStop from \"./StartAndStop\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const [disabled, setDisabled] = useState(true); // ToDo: Allow the user to adjust the focus and break duration.\n\n  let [focusDuration, setFocusDuration] = useState(25);\n\n  const incrementFocusDuration = () => setFocusDuration(time => time < 60 ? time + 5 : time);\n\n  const decrementFocusDuration = () => setFocusDuration(time => time > 5 ? time - 5 : time);\n\n  let [breakDuration, setBreakDuration] = useState(5);\n\n  const incrementBreakDuration = () => setBreakDuration(time => time < 60 ? time + 1 : time);\n\n  const decrementBreakDuration = () => setBreakDuration(time => time > 1 ? time - 1 : time);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setDisabled(false);\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  function stop() {\n    setIsTimerRunning(false);\n    setSession(null);\n    setDisabled(true);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Timers, {\n    incrementFocusDuration: incrementFocusDuration,\n    decrementFocusDuration: decrementFocusDuration,\n    incrementBreakDuration: incrementBreakDuration,\n    decrementBreakDuration: decrementBreakDuration,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StartAndStop, {\n    isTimerRunning: isTimerRunning,\n    disabled: disabled,\n    playPause: playPause,\n    stop: stop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ProgressDisplay, {\n    session: session,\n    isTimerRunning: isTimerRunning,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/geoff/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","ProgressDisplay","Timers","StartAndStop","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","disabled","setDisabled","setFocusDuration","incrementFocusDuration","time","decrementFocusDuration","setBreakDuration","incrementBreakDuration","decrementBreakDuration","Audio","play","playPause","nextState","prevStateSession","stop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport ProgressDisplay from \"./ProgressDisplay\";\nimport Timers from \"./Timers\";\nimport StartAndStop from \"./StartAndStop\"\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  const [disabled, setDisabled] = useState(true);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  let [focusDuration, setFocusDuration] = useState(25);\n  const incrementFocusDuration = () => setFocusDuration((time) => time < 60 ? time + 5 : time)\n  const decrementFocusDuration = () => setFocusDuration((time) => time > 5 ? time - 5 : time)\n  let [breakDuration, setBreakDuration] = useState(5);\n  const incrementBreakDuration = () => setBreakDuration((time) => time < 60 ? time + 1 : time)\n  const decrementBreakDuration = () => setBreakDuration((time) => time > 1 ? time - 1 : time)\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setDisabled(false)\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  function stop() {\n    setIsTimerRunning(false)\n    setSession(null)\n    setDisabled(true)\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <Timers \n        incrementFocusDuration={incrementFocusDuration}\n        decrementFocusDuration={decrementFocusDuration}\n        incrementBreakDuration={incrementBreakDuration}\n        decrementBreakDuration={decrementBreakDuration}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        disabled={disabled}\n      />\n      <StartAndStop \n        isTimerRunning={isTimerRunning}\n        disabled={disabled}\n        playPause={playPause}\n        stop={stop}\n      />\n      <ProgressDisplay \n        session={session} \n        isTimerRunning={isTimerRunning} \n        focusDuration={focusDuration}\n        breakDuration={breakDuration} />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}